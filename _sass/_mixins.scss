/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
@mixin icon-before($content: false) {

    text-decoration: none;

    &::before {

        @if $content {
            content: $content;
        }

        //@include vendor('font-smoothing', 'antialiased');
        //-moz-osx-font-smoothing: grayscale;
        font-family: 'FontAwesome';
        font-style: normal;
        font-weight: normal;
        text-transform: none !important;
    }
}

@mixin icon-after($content: false) {

    text-decoration: none;

    &::after {

        @if $content {
            content: $content;
        }

        //@include vendor('font-smoothing', 'antialiased');
        //-moz-osx-font-smoothing: grayscale;
        font-family: 'FontAwesome';
        font-style: normal;
        font-weight: normal;
        text-transform: none !important;

    }

}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0, 0, 0, 0), $important: null) {

    @if $important {
        $important: '!important';
    }

    padding: ($tb + nth($pad, 1)) ($lr + nth($pad, 2)) max(.1em, $tb - _size(element-margin) + nth($pad, 3)) ($lr + nth($pad, 4)) #{$important};

}

@mixin keyframe($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @-moz-keyframes #{$name} {
        @content;
    }

    @-o-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}

@mixin viewport {
    @viewport {
        @content;
    }

    @-ms-viewport {
        @content;
    }
}
